{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseResourceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource"
      },
      "maxLength": 15,
      "defaultValue": "[uniqueString(resourceGroup().id)]"
    },
    "databaseName": {
        "defaultValue": "[concat('db-', parameters('baseResourceName'))]",
        "metadata": {
            "description": "Name of the Database to be deployed"
        }
    },
    "databaseServerName": {
        "defaultValue": "[concat('svr-', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Name of the Database Server to be deployed"
            }
    },
    "StoreDBAPasswordInKeyVault": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
            "description": "Should the DBA Password be assigned to a Key Vault as part of this template if set Key Vault Id should be passed via 'keyVaultId' parameter"
        }
    },
    "keyVaultId": {
        "type": "string",
        "metadata": {
            "description": "Resource Id of the Key Vault to store the DBA Password In, required if StoreDBAPasswordInKeyVault is set, ignored otherwise"
        }
    },
    "transparentDataEncryption": {
        "type": "string",
        "allowedValues": [
          "Enabled",
          "Disabled"
        ],
        "defaultValue": "Enabled",
        "metadata": {
          "description": "Enable or disable Transparent Data Encryption (TDE) for the database."
        }
      },
      "AuditRetentionPeriodInDays": {
        "type": "int",
        "defaultValue": 7
      },
    "sqlServerAdminLogin": {
        "type": "string",
        "metadata": {
            "description": "The username for administering the SQL Server"
        },
        "defaultValue":"dbaMan"
    },
    "sqlServerAdminPassword": {
        "type": "securestring",
        "metadata": {
            "description": "The password for administering the SQL Server"
        },
        "defaultValue": "[concat('L1',uniqueString(subscription().id),'#')]"
    },
    "sqlDatabaseEdition": {
        "type": "string",
        "metadata": {
          "description": "The type of database to create."
        },
        "allowedValues": [
          "Basic",
          "Standard",
          "Premium"
        ],
        "defaultValue": "Basic"
      },
      "sqlDatabaseCollation": {
        "type": "string",
        "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
        "metadata": {
          "description": "The database collation for governing the proper use of characters."
        }
      },
      "sqlDatabaseMaxSizeBytes": {
        "type": "string",
        "defaultValue": "1073741824",
        "metadata": {
          "description": "The maximum size, in bytes, for the database"
        }
      },
    "useAADGroupForSQLAdmin": {
        "type": "bool",
        "metadata": {
          "description": "Should the SQL Database be set to support Azure Active Directory User/Group for Administration.  If set the 'AADAdminObjectID' and 'AADLogin' parameters must be set."
        },
        "defaultValue": false
    },
    "AADAdminLogin": {
        "type": "string",
        "metadata": {
            "description": "The Login ID for the Azure Active Directory user or group to be a server admin"
        }
    },
    "AADAdminObjectID": {
        "type": "string",
        "metadata": {
            "description": "The Object ID for the Azure Active Directory user or group to be a server admin"
        }
    },
    "AlertWindowSizeInMinutes": {
      "type": "string",
      "metadata": {
        "description": "Window size used for alerts in minutes"
      },
      "defaultValue": "5"
    },
    "AlertSendToServiceOwners": {
      "type": "bool",
      "metadata": {
        "description": "Should the alerts be sent to the service owners?"
      },
      "defaultValue": true  
    },
    "AlertSendToEmailAddress": {
      "type": "string",
      "metadata": {
        "description": "Custom Email Address for alerts"
      },
      "defaultValue": null 
    },
    "BlockedFirewallConnectionsAlertEnabled": {
      "type": "bool",
      "metadata": {
        "description": "Sets the Enabled Flag for Database alert rule for connections blocked by the firewall"
      },
      "defaultValue": true
    },
    "BlockedFirewallConnectionsThreshold": {
      "type": "string",
      "metadata": {
        "description": "Number of Blocked Connections in the period to trigger the alert"
      },
      "defaultValue": "10"
    },
    "FailedConnectionsAlertEnabled": {
      "type": "bool",
      "metadata": {
        "description": "Sets the Enabled Flag for Database alert rule for failed connections "
      },
      "defaultValue": true
    },
    "FailedConnectionsThreshold": {
      "type": "string",
      "metadata": {
        "description": "Number of failed connections in the period to trigger the alert"
      },
      "defaultValue": "10"
    },
    "UseBYOK": {
        "type": "bool",
        "metadata": {
            "description": "Should we use Bring Your Own Key for TDE, if set BYOKKeyVaultId and BYOKCertUri must be set"
          },
        "defaultValue": false
    },
    "BYOKKeyVaultId": {
        "type": "string",
        "metadata": {
            "description": "The Resource Id of the Key Vault"
          } 
    },
    "TagCostCtr": {
      "type": "string",
      "metadata": {
          "description": "The value of the Cost Center for this resource for use in the CostCtr Tag"
      }
  },
  "storageAccountId": {
      "type": "string",
      "metadata": {
          "description": "Resource Id for the storage account to store diagnostics"
      }
  },
  "workspaceId": {
    "type": "string",
    "metadata": {
        "description": "Resource Id for the Log Analytics workspace to store diagnostics"
    }
}
  },
  "variables": {
    "databaseName": "[concat('asq-', parameters('baseResourceName'))]",
    "databaseServerName": "[concat('svr', uniqueString(resourceGroup().id))]",
    "AAD TenantID": "[subscription().tenantId]",
    "arrayStorageId": "[split(parameters('storageAccountId'), '/')]",
    "storageAccountName": "[last(variables('arrayStorageId'))]",
    "storageEndpoint": "[concat('https://',variables('storageAccountName'),'.blob.core.windows.net')]",
    "customEmails": "[split(parameters('AlertSendToEmailAddress'), ',')]",
    "arrayWorkspaceName": "[split(parameters('workspaceId'), '/')]",
    "aggregateWorkspaceName": "[last(variables('arrayWorkspaceName'))]",
    "AzureSQLAnalytics": {
      "Name": "[Concat('AzureSQLAnalytics', '(', variables('aggregateWorkspaceName'), ')')]",
      "GalleryName": "AzureSQLAnalytics"
    }
  },
  "resources": [
       {
      "name": "[variables('databaseServerName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "apiVersion": "2014-04-01-preview",
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerAdminPassword')]",
        "version": "12.0"
      },
      "identity": {
        "type": "SystemAssigned"
    },
      "resources": [
        {
          "name": "[variables('databaseName')]",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[variables('databaseServerName')]"
          ],
          "properties": {
            "edition": "[parameters('sqlDatabaseEdition')]",
            "collation": "[parameters('sqlDatabaseCollation')]",
            "maxSizeBytes": "[parameters('sqlDatabaseMaxSizeBytes')]"
          },
          "resources": [
            {

              "comments": "Transparent Data Encryption",
              "name": "current",
              "type": "transparentDataEncryption",
              "apiVersion": "2014-04-01-preview",
              "properties": {
                "status": "[parameters('transparentDataEncryption')]"
              },
              "dependsOn": [
                "[variables('databaseName')]"
              ]
            }
          ]
        },
        {
          "apiVersion": "2015-05-01-preview",
          "type": "auditingSettings",
          "name": "Default",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('databaseServerName'))]"
          ],
          "properties": {
            "State": "Enabled",
            "storageEndpoint": "[variables('storageEndpoint')]",
            "storageAccountAccessKey": "[listKeys(parameters('storageAccountId'),providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",
            "retentionDays": "[parameters('AuditRetentionPeriodInDays')]",
            "auditActionsAndGroups": null,
            "storageAccountSubscriptionId": "[subscription().subscriptionId]",
            "isStorageSecondaryKeyInUse": false
          }
        },
        {
          "apiVersion": "2015-05-01-preview",
          "type": "securityAlertPolicies",
          "name": "DefaultSecurityPolicies",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('databaseServerName'))]",
            "[concat('Microsoft.Sql/servers/', variables('databaseServerName'), '/auditingSettings/Default')]"
          ],
          "properties": {
              "state": "Enabled",
              "disabledAlerts": "",
              "emailAddresses": "[parameters('AlertSendToEmailAddress')]",
              "emailAccountAdmins": "Enabled",
              "storageEndpoint": "[variables('storageEndpoint')]",
              "storageAccountAccessKey": "[listKeys(parameters('storageAccountId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",
              "retentionDays": "[parameters('AuditRetentionPeriodInDays')]"
          }
        },
        {
            "condition": "[equals(parameters('useAADGroupForSQLAdmin'), 'Yes')]",
            "type": "administrators",
            "name": "activeDirectory",
            "apiVersion": "2014-04-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "administratorType": "ActiveDirectory",
                "login": "[parameters('AADAdminLogin')]",
                "sid": "[parameters('AADAdminObjectID')]",
                "tenantId": "[variables('AAD TenantID')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Sql/servers/', variables('databaseServerName'))]"
            ]
        },
        {
          "type": "firewallrules",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[variables('databaseServerName')]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        }
      ]
    },         
    {
      "name": "FirewallBlockedConnections",
      "type": "microsoft.insights/alertrules",
      "apiVersion": "2016-03-01",      
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('databaseName')]"
      ],
      "properties": {
        "name:": "FirewallBlockedConnections",
        "description": "Alerts on connection attempts blocked by the Firewall",
        "isEnabled": "[parameters('BlockedFirewallConnectionsAlertEnabled')]",
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[resourceId('Microsoft.Sql/servers/databases', variables('databaseServerName'), variables('databaseName'))]",
            "metricName": "blocked_by_firewall"
          },
          "operator": "GreaterThanOrEqual",
          "threshold": "[parameters('BlockedFirewallConnectionsThreshold')]",
          "windowSize": "[concat('PT',parameters('AlertWindowSizeInMinutes'),'M')]",
          "timeAggregation": "Average"
          },
          "actions": [
            {
              "$type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.RuleEmailAction, Microsoft.WindowsAzure.Management.Mon.Client",
              "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
              "sendToServiceOwners": "[parameters('AlertSendToServiceOwners')]",
              "customEmails": "[variables('customEmails')]"
            }
          ]
        },
        "resources": []
      },
      {
        "type": "Microsoft.Insights/alertRules",
        "name": "FailedDatabaseConnections",
        "dependsOn": [
          "[variables('databaseName')]"
        ],
        "location": "[resourceGroup().location]",
        "apiVersion": "2014-04-01",
        "properties": {
          "name:": "FailedDatabaseConnections",
          "description": "Alerts on failed connection attempts",
          "isEnabled": "[parameters('FailedConnectionsAlertEnabled')]",
          "condition": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
                "dataSource": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                    "resourceUri": "[resourceId('Microsoft.Sql/servers/databases', variables('databaseServerName'), variables('databaseName'))]",
                    "metricName": "connection_failed"
                },
                "operator": "GreaterThan",
                "threshold": "[parameters('FailedConnectionsThreshold')]",
                "windowSize": "[concat('PT',parameters('AlertWindowSizeInMinutes'),'M')]"
            },
            "actions": [
              {
                "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                "sendToServiceOwners": "[parameters('AlertSendToServiceOwners')]",
                "customEmails": "[variables('customEmails')]"
              }
            ]
      }
    },
    {
      "type": "Microsoft.Sql/servers/databases/providers/diagnosticSettings",
      "name": "[concat(variables('databaseServerName'),'/', variables('databaseName'),'/Microsoft.Insights/SQLLogAnalyticsIntegration')]",
      "apiVersion": "2017-05-01-preview",
      "dependsOn": [
        "[variables('databaseServerName')]",
        "[variables('databaseName')]"
      ],
      "properties": {
        "logs": [
        {
          "category": "Errors",
          "enabled": true,
          "retentionPolicy": {
            "days": 7,
            "enabled": false
          }
        },
        {
          "category": "Audit",
          "enabled": true,
          "retentionPolicy": {
            "days": 90,
            "enabled": false
          }
        },
        {
          "category": "SQLSecurityAuditEvents",
          "enabled": true,
          "retentionPolicy": {
            "days": 90,
            "enabled": false
          }
        }
        ],
        "metrics": [
        {
          "category": "AllMetrics",
          "enabled": true,
          "retentionPolicy": {
            "enabled": false,
            "days": 7
          }
        }
        ]
      }
    },
    {
      "apiVersion": "2015-11-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('AzureSQLAnalytics').Name]",
      "type": "Microsoft.OperationsManagement/solutions",
      "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.OperationsManagement/solutions/', variables('AzureSQLAnalytics').Name)]",
      "properties": {
        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces/', variables('aggregateWorkspaceName'))]" 
      },
      "plan": {
        "name": "[variables('AzureSQLAnalytics').Name]",
        "publisher": "Microsoft",
        "product": "[Concat('OMSGallery/', variables('AzureSQLAnalytics').GalleryName)]",
        "promotionCode": ""
      }
    }
    ]
  }
  


